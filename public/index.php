<?php
//1. Разобраться с принципом работы движка.

//2. По образу и подобию модуля авторизации из движка V1.0 создать модуль работы с пользователем:

//а) Пользователь должен уметь входить в систему;
// При вводе логина и пароля в форму авторизации и нажатии на кнопку "Войти" отправляется ajax-запрос,
// который перехватывается главным контроллером и передается в метод ajax() главной модели.
// В методе ajax() производится попытка авторизации с переданными параметрами login, pass, и если она успешна,
// пользователь авторизуется, и вместо формы авторизации приходит форма со ссылкой на Личный кабинет

//б) Пользователь должен уметь выходить из системы;
// При нажатии на кнопку "Выход" отправляется пустая форма и происходит выход из личного кабинета

//в) У пользователя должен быть личный кабинет (пока пустой).
// Создан личный кабинет:
// - контоллер AccountController,
// - модель AccountModel,
// - представление (шаблон) /account/index.php
// Для входа в личный кабинет можно использовать логин/пароль user2/pass2 или user3/pass3
// Попасть в личный кабинет можно по ссылке /account/
// При этом, если пользователь не залогинен, то происходит перенаправление на Главную страницу

//3. *Научить движок запоминать 5 последних просмотренных страниц.
// Выводить их в личном кабинете блоком «Вы недавно смотрели».
// При каждом посещении главная модель вносит в таблицу last_seen_pages url страницы и id пользователя.
// Таким образом, происходит запоминание страниц, по которым переходил пользователь и их последующий вывод в шаблоне
// Так как контроллеры для подкаталогов, товаров, статей, контактов, галерея пока не реализованы,
// в таблицу заносится только переход на страницу каталога

include '../app.php';



//$loader = new Twig_loader_FileSystem('../templates');
//$twig = new Twig_Environment($loader);
//
//// если пришел post-запрос по клику на кнопку "Показать еще"
//if(isset($_POST['PageAjax']) && ($_POST['PageAjax'] === 'see_additional_goods')){
//    require_once '../controller/sub_catalog_see_more_goods.php';
//    exit();
//}
//
//// парсим адрес строки, чтобы получить ЧПУ-страницу запроса
//$url = parse_url("http://".$_SERVER["HTTP_HOST"].$_SERVER['REQUEST_URI']);
//
//// разбиваем строку url в массив по разделителю '/'
//$dirs = explode('/', $url['path']);
//
//// парсим переменные GET в глобальный массив $_GET
//isset($url['query']) && parse_str($url['query'], $_GET);
//
//// декодируем в UTF-8 все символы, отличные от латиницы
//for ($i = 1; $i < (count($dirs) - 1); $i++) {
//    $dirs[$i] = urldecode($dirs[$i]);
//}
//
//// ищем, есть ли соответствующий контроллер в каталоге controller
//$filename = '../controller/' . $dirs[1] . '.php';
//// если контроллер существует, загрузить его, иначе загрузить стр. 404
//if (file_exists($filename)){
//    require_once $filename;
//} else {
//    $template = $twig->LoadTemplate('page404/index.php');
//    echo $template->render(array(
//            'domain'=>'/',
//            'content_data' => $categories)
//    );
//}



